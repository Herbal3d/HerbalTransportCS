// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BasilMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace org.herbal3d.basil.protocol.Message {

  /// <summary>Holder for reflection information generated from BasilMessage.proto</summary>
  public static partial class BasilMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for BasilMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BasilMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJCYXNpbE1lc3NhZ2UucHJvdG8SDEJhc2lsTWVzc2FnZSLlAQoNUG9zaXRp",
            "b25CbG9jaxILCgNQb3MYASADKAESCwoDUm90GAIgAygBEikKBlBvc1JlZhgD",
            "IAEoDjIZLkJhc2lsTWVzc2FnZS5Db29yZFN5c3RlbRIsCgZSb3RSZWYYBCAB",
            "KA4yHC5CYXNpbE1lc3NhZ2UuUm90YXRpb25TeXN0ZW0SCwoDVmVsGAUgAygB",
            "EgwKBFBhdGgYBiADKAESDwoHSXRlbUlkThgKIAEoDRIOCgZJdGVtSWQYCyAB",
            "KAkSEwoLU2Vzc2lvbkF1dGgYDCABKAkSEAoISXRlbUF1dGgYDSABKAkifwoK",
            "UGFyYW1CbG9jaxIPCgdBYmlsaXR5GAEgASgJEjIKBVByb3BzGAIgAygLMiMu",
            "QmFzaWxNZXNzYWdlLlBhcmFtQmxvY2suUHJvcHNFbnRyeRosCgpQcm9wc0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEi7wQKDEJhc2ls",
            "TWVzc2FnZRIUCgxSZXNwb25zZUNvZGUYASABKA0SEwoLUmVzcG9uc2VLZXkY",
            "FCABKAkSEAoIU3RyZWFtSWQYAyABKA0SFwoPUHJvdG9jb2xWZXJzaW9uGAQg",
            "ASgNEhEKCUNoYW5nZVNlcRgeIAEoBBISCgpDaGFuZ2VUaW1lGB8gASgEEhEK",
            "CVF1ZXVlVGltZRgoIAEoDRIQCghTZW5kVGltZRgpIAEoDRIWCg5UcmFuc3Bv",
            "cnRDbGFzcxgqIAEoDRIKCgJPcBgFIAEoDRITCgtTZXNzaW9uQXV0aBgGIAEo",
            "CRIPCgdJdGVtSWROGAcgASgNEg4KBkl0ZW1JZBgIIAEoCRIQCghJdGVtQXV0",
            "aBgVIAEoCRI2CgZJUHJvcHMYCSADKAsyJi5CYXNpbE1lc3NhZ2UuQmFzaWxN",
            "ZXNzYWdlLklQcm9wc0VudHJ5EigKBkFQcm9wcxgKIAMoCzIYLkJhc2lsTWVz",
            "c2FnZS5QYXJhbUJsb2NrEi4KCVBvc2l0aW9ucxgLIAMoCzIbLkJhc2lsTWVz",
            "c2FnZS5Qb3NpdGlvbkJsb2NrEhEKCUV4Y2VwdGlvbhgMIAEoCRJGCg5FeGNl",
            "cHRpb25IaW50cxgWIAMoCzIuLkJhc2lsTWVzc2FnZS5CYXNpbE1lc3NhZ2Uu",
            "RXhjZXB0aW9uSGludHNFbnRyeRotCgtJUHJvcHNFbnRyeRILCgNrZXkYASAB",
            "KAkSDQoFdmFsdWUYAiABKAk6AjgBGjUKE0V4Y2VwdGlvbkhpbnRzRW50cnkS",
            "CwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASrdAwoPQmFzaWxNZXNz",
            "YWdlT3BzEg4KClVua25vd25SZXEQABIRCg1DcmVhdGVJdGVtUmVxEGUSEgoO",
            "Q3JlYXRlSXRlbVJlc3AQZhIRCg1EZWxldGVJdGVtUmVxEGcSEgoORGVsZXRl",
            "SXRlbVJlc3AQaBIRCg1BZGRBYmlsaXR5UmVxEGkSEgoOQWRkQWJpbGl0eVJl",
            "c3AQahIUChBSZW1vdmVBYmlsaXR5UmVxEGsSFQoRUmVtb3ZlQWJpbGl0eVJl",
            "c3AQbBIYChRSZXF1ZXN0UHJvcGVydGllc1JlcRBtEhkKFVJlcXVlc3RQcm9w",
            "ZXJ0aWVzUmVzcBBuEhcKE1VwZGF0ZVByb3BlcnRpZXNSZXEQbxIYChRVcGRh",
            "dGVQcm9wZXJ0aWVzUmVzcBBwEhMKDk9wZW5TZXNzaW9uUmVxEMkBEhQKD09w",
            "ZW5TZXNzaW9uUmVzcBDKARIUCg9DbG9zZVNlc3Npb25SZXEQywESFQoQQ2xv",
            "c2VTZXNzaW9uUmVzcBDMARIWChFNYWtlQ29ubmVjdGlvblJlcRDNARIXChJN",
            "YWtlQ29ubmVjdGlvblJlc3AQzgESEgoNQWxpdmVDaGVja1JlcRCtAhITCg5B",
            "bGl2ZUNoZWNrUmVzcBCuAipyCgtDb29yZFN5c3RlbRIJCgVXR1M4NhAAEgoK",
            "BkNBTUVSQRABEg0KCUNBTUVSQUFCUxACEgsKB1ZJUlRVQUwQAxIICgRNT09O",
            "EAQSCAoETUFSUxAFEggKBFJFTDEQBhIICgRSRUwyEAcSCAoEUkVMMxAIKj8K",
            "DlJvdGF0aW9uU3lzdGVtEgoKBldPUkxEUhAAEgoKBkxPQ0FMUhABEggKBEZP",
            "UlIQAhILCgdDQU1FUkFSEANCJqoCI29yZy5oZXJiYWwzZC5iYXNpbC5wcm90",
            "b2NvbC5NZXNzYWdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::org.herbal3d.basil.protocol.Message.BasilMessageOps), typeof(global::org.herbal3d.basil.protocol.Message.CoordSystem), typeof(global::org.herbal3d.basil.protocol.Message.RotationSystem), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.Message.PositionBlock), global::org.herbal3d.basil.protocol.Message.PositionBlock.Parser, new[]{ "Pos", "Rot", "PosRef", "RotRef", "Vel", "Path", "ItemIdN", "ItemId", "SessionAuth", "ItemAuth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.Message.ParamBlock), global::org.herbal3d.basil.protocol.Message.ParamBlock.Parser, new[]{ "Ability", "Props" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.Message.BasilMessage), global::org.herbal3d.basil.protocol.Message.BasilMessage.Parser, new[]{ "ResponseCode", "ResponseKey", "StreamId", "ProtocolVersion", "ChangeSeq", "ChangeTime", "QueueTime", "SendTime", "TransportClass", "Op", "SessionAuth", "ItemIdN", "ItemId", "ItemAuth", "IProps", "AProps", "Positions", "Exception", "ExceptionHints" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// The operations
  /// </summary>
  public enum BasilMessageOps {
    [pbr::OriginalName("UnknownReq")] UnknownReq = 0,
    [pbr::OriginalName("CreateItemReq")] CreateItemReq = 101,
    [pbr::OriginalName("CreateItemResp")] CreateItemResp = 102,
    [pbr::OriginalName("DeleteItemReq")] DeleteItemReq = 103,
    [pbr::OriginalName("DeleteItemResp")] DeleteItemResp = 104,
    [pbr::OriginalName("AddAbilityReq")] AddAbilityReq = 105,
    [pbr::OriginalName("AddAbilityResp")] AddAbilityResp = 106,
    [pbr::OriginalName("RemoveAbilityReq")] RemoveAbilityReq = 107,
    [pbr::OriginalName("RemoveAbilityResp")] RemoveAbilityResp = 108,
    [pbr::OriginalName("RequestPropertiesReq")] RequestPropertiesReq = 109,
    [pbr::OriginalName("RequestPropertiesResp")] RequestPropertiesResp = 110,
    [pbr::OriginalName("UpdatePropertiesReq")] UpdatePropertiesReq = 111,
    [pbr::OriginalName("UpdatePropertiesResp")] UpdatePropertiesResp = 112,
    [pbr::OriginalName("OpenSessionReq")] OpenSessionReq = 201,
    [pbr::OriginalName("OpenSessionResp")] OpenSessionResp = 202,
    [pbr::OriginalName("CloseSessionReq")] CloseSessionReq = 203,
    [pbr::OriginalName("CloseSessionResp")] CloseSessionResp = 204,
    [pbr::OriginalName("MakeConnectionReq")] MakeConnectionReq = 205,
    [pbr::OriginalName("MakeConnectionResp")] MakeConnectionResp = 206,
    [pbr::OriginalName("AliveCheckReq")] AliveCheckReq = 301,
    [pbr::OriginalName("AliveCheckResp")] AliveCheckResp = 302,
  }

  /// <summary>
  /// ========================== Data packaging
  /// Specifying a position.
  /// </summary>
  public enum CoordSystem {
    /// <summary>
    /// WGS84 earth coordinates
    /// </summary>
    [pbr::OriginalName("WGS86")] Wgs86 = 0,
    /// <summary>
    /// Coordinates relative to camera position (-1..1 range, zero center)
    /// </summary>
    [pbr::OriginalName("CAMERA")] Camera = 1,
    /// <summary>
    /// Absolute coordinates relative to the camera position (zero center)
    /// </summary>
    [pbr::OriginalName("CAMERAABS")] Cameraabs = 2,
    /// <summary>
    /// Zero based un-rooted coordinates
    /// </summary>
    [pbr::OriginalName("VIRTUAL")] Virtual = 3,
    /// <summary>
    /// Earth-moon coordinates
    /// </summary>
    [pbr::OriginalName("MOON")] Moon = 4,
    /// <summary>
    /// Mars coordinates
    /// </summary>
    [pbr::OriginalName("MARS")] Mars = 5,
    /// <summary>
    /// Mutually agreed base coordinates
    /// </summary>
    [pbr::OriginalName("REL1")] Rel1 = 6,
    [pbr::OriginalName("REL2")] Rel2 = 7,
    [pbr::OriginalName("REL3")] Rel3 = 8,
  }

  public enum RotationSystem {
    /// <summary>
    /// rotation is relative to world coordinates
    /// </summary>
    [pbr::OriginalName("WORLDR")] Worldr = 0,
    /// <summary>
    /// rotation is relative to referenced object
    /// </summary>
    [pbr::OriginalName("LOCALR")] Localr = 1,
    /// <summary>
    /// rotation is relative to current frame of reference
    /// </summary>
    [pbr::OriginalName("FORR")] Forr = 2,
    /// <summary>
    /// rotation is relative to the camera direction
    /// </summary>
    [pbr::OriginalName("CAMERAR")] Camerar = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Used both for specifying a single position or repeated as update for multiple items
  /// Used to specify position and possibly future path.
  /// </summary>
  public sealed partial class PositionBlock : pb::IMessage<PositionBlock> {
    private static readonly pb::MessageParser<PositionBlock> _parser = new pb::MessageParser<PositionBlock>(() => new PositionBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.Message.BasilMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionBlock(PositionBlock other) : this() {
      pos_ = other.pos_.Clone();
      rot_ = other.rot_.Clone();
      posRef_ = other.posRef_;
      rotRef_ = other.rotRef_;
      vel_ = other.vel_.Clone();
      path_ = other.path_.Clone();
      itemIdN_ = other.itemIdN_;
      itemId_ = other.itemId_;
      sessionAuth_ = other.sessionAuth_;
      itemAuth_ = other.itemAuth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionBlock Clone() {
      return new PositionBlock(this);
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_pos_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> pos_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// three doubles for a position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Pos {
      get { return pos_; }
    }

    /// <summary>Field number for the "Rot" field.</summary>
    public const int RotFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_rot_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> rot_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// four doubles for a quaternion rotation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Rot {
      get { return rot_; }
    }

    /// <summary>Field number for the "PosRef" field.</summary>
    public const int PosRefFieldNumber = 3;
    private global::org.herbal3d.basil.protocol.Message.CoordSystem posRef_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.Message.CoordSystem PosRef {
      get { return posRef_; }
      set {
        posRef_ = value;
      }
    }

    /// <summary>Field number for the "RotRef" field.</summary>
    public const int RotRefFieldNumber = 4;
    private global::org.herbal3d.basil.protocol.Message.RotationSystem rotRef_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.Message.RotationSystem RotRef {
      get { return rotRef_; }
      set {
        rotRef_ = value;
      }
    }

    /// <summary>Field number for the "Vel" field.</summary>
    public const int VelFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_vel_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> vel_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// More complex position properties
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Vel {
      get { return vel_; }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_path_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> path_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// pairs of pos/rot defining path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "ItemIdN" field.</summary>
    public const int ItemIdNFieldNumber = 10;
    private uint itemIdN_;
    /// <summary>
    /// Sometimes PositionBlock is repeated to apply to many Item/Components
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemIdN {
      get { return itemIdN_; }
      set {
        itemIdN_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 11;
    private string itemId_ = "";
    /// <summary>
    /// item being operated on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SessionAuth" field.</summary>
    public const int SessionAuthFieldNumber = 12;
    private string sessionAuth_ = "";
    /// <summary>
    /// authorization to make request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionAuth {
      get { return sessionAuth_; }
      set {
        sessionAuth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemAuth" field.</summary>
    public const int ItemAuthFieldNumber = 13;
    private string itemAuth_ = "";
    /// <summary>
    /// per item authorization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemAuth {
      get { return itemAuth_; }
      set {
        itemAuth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pos_.Equals(other.pos_)) return false;
      if(!rot_.Equals(other.rot_)) return false;
      if (PosRef != other.PosRef) return false;
      if (RotRef != other.RotRef) return false;
      if(!vel_.Equals(other.vel_)) return false;
      if(!path_.Equals(other.path_)) return false;
      if (ItemIdN != other.ItemIdN) return false;
      if (ItemId != other.ItemId) return false;
      if (SessionAuth != other.SessionAuth) return false;
      if (ItemAuth != other.ItemAuth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pos_.GetHashCode();
      hash ^= rot_.GetHashCode();
      if (PosRef != 0) hash ^= PosRef.GetHashCode();
      if (RotRef != 0) hash ^= RotRef.GetHashCode();
      hash ^= vel_.GetHashCode();
      hash ^= path_.GetHashCode();
      if (ItemIdN != 0) hash ^= ItemIdN.GetHashCode();
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (SessionAuth.Length != 0) hash ^= SessionAuth.GetHashCode();
      if (ItemAuth.Length != 0) hash ^= ItemAuth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pos_.WriteTo(output, _repeated_pos_codec);
      rot_.WriteTo(output, _repeated_rot_codec);
      if (PosRef != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PosRef);
      }
      if (RotRef != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RotRef);
      }
      vel_.WriteTo(output, _repeated_vel_codec);
      path_.WriteTo(output, _repeated_path_codec);
      if (ItemIdN != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ItemIdN);
      }
      if (ItemId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ItemId);
      }
      if (SessionAuth.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SessionAuth);
      }
      if (ItemAuth.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ItemAuth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pos_.CalculateSize(_repeated_pos_codec);
      size += rot_.CalculateSize(_repeated_rot_codec);
      if (PosRef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PosRef);
      }
      if (RotRef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RotRef);
      }
      size += vel_.CalculateSize(_repeated_vel_codec);
      size += path_.CalculateSize(_repeated_path_codec);
      if (ItemIdN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemIdN);
      }
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (SessionAuth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionAuth);
      }
      if (ItemAuth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemAuth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionBlock other) {
      if (other == null) {
        return;
      }
      pos_.Add(other.pos_);
      rot_.Add(other.rot_);
      if (other.PosRef != 0) {
        PosRef = other.PosRef;
      }
      if (other.RotRef != 0) {
        RotRef = other.RotRef;
      }
      vel_.Add(other.vel_);
      path_.Add(other.path_);
      if (other.ItemIdN != 0) {
        ItemIdN = other.ItemIdN;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.SessionAuth.Length != 0) {
        SessionAuth = other.SessionAuth;
      }
      if (other.ItemAuth.Length != 0) {
        ItemAuth = other.ItemAuth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
          case 18:
          case 17: {
            rot_.AddEntriesFrom(input, _repeated_rot_codec);
            break;
          }
          case 24: {
            PosRef = (global::org.herbal3d.basil.protocol.Message.CoordSystem) input.ReadEnum();
            break;
          }
          case 32: {
            RotRef = (global::org.herbal3d.basil.protocol.Message.RotationSystem) input.ReadEnum();
            break;
          }
          case 42:
          case 41: {
            vel_.AddEntriesFrom(input, _repeated_vel_codec);
            break;
          }
          case 50:
          case 49: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 80: {
            ItemIdN = input.ReadUInt32();
            break;
          }
          case 90: {
            ItemId = input.ReadString();
            break;
          }
          case 98: {
            SessionAuth = input.ReadString();
            break;
          }
          case 106: {
            ItemAuth = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A block of parameters.
  /// Can be used for a Ability property setting
  /// </summary>
  public sealed partial class ParamBlock : pb::IMessage<ParamBlock> {
    private static readonly pb::MessageParser<ParamBlock> _parser = new pb::MessageParser<ParamBlock>(() => new ParamBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.Message.BasilMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamBlock(ParamBlock other) : this() {
      ability_ = other.ability_;
      props_ = other.props_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamBlock Clone() {
      return new ParamBlock(this);
    }

    /// <summary>Field number for the "Ability" field.</summary>
    public const int AbilityFieldNumber = 1;
    private string ability_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ability {
      get { return ability_; }
      set {
        ability_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Props" field.</summary>
    public const int PropsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_props_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> props_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Props {
      get { return props_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ability != other.Ability) return false;
      if (!Props.Equals(other.Props)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ability.Length != 0) hash ^= Ability.GetHashCode();
      hash ^= Props.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ability.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ability);
      }
      props_.WriteTo(output, _map_props_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ability.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ability);
      }
      size += props_.CalculateSize(_map_props_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamBlock other) {
      if (other == null) {
        return;
      }
      if (other.Ability.Length != 0) {
        Ability = other.Ability;
      }
      props_.Add(other.props_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ability = input.ReadString();
            break;
          }
          case 18: {
            props_.AddEntriesFrom(input, _map_props_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ========================== Message sent between Basil and a SpaceServer
  /// Bi-directional and used like a syncronization protocol
  /// </summary>
  public sealed partial class BasilMessage : pb::IMessage<BasilMessage> {
    private static readonly pb::MessageParser<BasilMessage> _parser = new pb::MessageParser<BasilMessage>(() => new BasilMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasilMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.Message.BasilMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasilMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasilMessage(BasilMessage other) : this() {
      responseCode_ = other.responseCode_;
      responseKey_ = other.responseKey_;
      streamId_ = other.streamId_;
      protocolVersion_ = other.protocolVersion_;
      changeSeq_ = other.changeSeq_;
      changeTime_ = other.changeTime_;
      queueTime_ = other.queueTime_;
      sendTime_ = other.sendTime_;
      transportClass_ = other.transportClass_;
      op_ = other.op_;
      sessionAuth_ = other.sessionAuth_;
      itemIdN_ = other.itemIdN_;
      itemId_ = other.itemId_;
      itemAuth_ = other.itemAuth_;
      iProps_ = other.iProps_.Clone();
      aProps_ = other.aProps_.Clone();
      positions_ = other.positions_.Clone();
      exception_ = other.exception_;
      exceptionHints_ = other.exceptionHints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasilMessage Clone() {
      return new BasilMessage(this);
    }

    /// <summary>Field number for the "ResponseCode" field.</summary>
    public const int ResponseCodeFieldNumber = 1;
    private uint responseCode_;
    /// <summary>
    /// header for tracking and response (RPC) linkage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResponseCode {
      get { return responseCode_; }
      set {
        responseCode_ = value;
      }
    }

    /// <summary>Field number for the "ResponseKey" field.</summary>
    public const int ResponseKeyFieldNumber = 20;
    private string responseKey_ = "";
    /// <summary>
    /// optional key to verify response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseKey {
      get { return responseKey_; }
      set {
        responseKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StreamId" field.</summary>
    public const int StreamIdFieldNumber = 3;
    private uint streamId_;
    /// <summary>
    /// if there are multiple streams in the connection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StreamId {
      get { return streamId_; }
      set {
        streamId_ = value;
      }
    }

    /// <summary>Field number for the "ProtocolVersion" field.</summary>
    public const int ProtocolVersionFieldNumber = 4;
    private uint protocolVersion_;
    /// <summary>
    /// versioning info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "ChangeSeq" field.</summary>
    public const int ChangeSeqFieldNumber = 30;
    private ulong changeSeq_;
    /// <summary>
    /// Change ordering
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChangeSeq {
      get { return changeSeq_; }
      set {
        changeSeq_ = value;
      }
    }

    /// <summary>Field number for the "ChangeTime" field.</summary>
    public const int ChangeTimeFieldNumber = 31;
    private ulong changeTime_;
    /// <summary>
    /// time code for change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChangeTime {
      get { return changeTime_; }
      set {
        changeTime_ = value;
      }
    }

    /// <summary>Field number for the "QueueTime" field.</summary>
    public const int QueueTimeFieldNumber = 40;
    private uint queueTime_;
    /// <summary>
    /// Preformance/metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QueueTime {
      get { return queueTime_; }
      set {
        queueTime_ = value;
      }
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 41;
    private uint sendTime_;
    /// <summary>
    /// when request was sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "TransportClass" field.</summary>
    public const int TransportClassFieldNumber = 42;
    private uint transportClass_;
    /// <summary>
    /// prioritization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TransportClass {
      get { return transportClass_; }
      set {
        transportClass_ = value;
      }
    }

    /// <summary>Field number for the "Op" field.</summary>
    public const int OpFieldNumber = 5;
    private uint op_;
    /// <summary>
    /// Operation and operation parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "SessionAuth" field.</summary>
    public const int SessionAuthFieldNumber = 6;
    private string sessionAuth_ = "";
    /// <summary>
    /// authorization to make request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionAuth {
      get { return sessionAuth_; }
      set {
        sessionAuth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemIdN" field.</summary>
    public const int ItemIdNFieldNumber = 7;
    private uint itemIdN_;
    /// <summary>
    /// item being operated on (by session assigned number)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemIdN {
      get { return itemIdN_; }
      set {
        itemIdN_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 8;
    private string itemId_ = "";
    /// <summary>
    /// item being operated on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemAuth" field.</summary>
    public const int ItemAuthFieldNumber = 21;
    private string itemAuth_ = "";
    /// <summary>
    /// per item authorization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemAuth {
      get { return itemAuth_; }
      set {
        itemAuth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IProps" field.</summary>
    public const int IPropsFieldNumber = 9;
    private static readonly pbc::MapField<string, string>.Codec _map_iProps_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 74);
    private readonly pbc::MapField<string, string> iProps_ = new pbc::MapField<string, string>();
    /// <summary>
    /// properties to update on item
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> IProps {
      get { return iProps_; }
    }

    /// <summary>Field number for the "AProps" field.</summary>
    public const int APropsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::org.herbal3d.basil.protocol.Message.ParamBlock> _repeated_aProps_codec
        = pb::FieldCodec.ForMessage(82, global::org.herbal3d.basil.protocol.Message.ParamBlock.Parser);
    private readonly pbc::RepeatedField<global::org.herbal3d.basil.protocol.Message.ParamBlock> aProps_ = new pbc::RepeatedField<global::org.herbal3d.basil.protocol.Message.ParamBlock>();
    /// <summary>
    /// Abilities and their properties
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::org.herbal3d.basil.protocol.Message.ParamBlock> AProps {
      get { return aProps_; }
    }

    /// <summary>Field number for the "Positions" field.</summary>
    public const int PositionsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::org.herbal3d.basil.protocol.Message.PositionBlock> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(90, global::org.herbal3d.basil.protocol.Message.PositionBlock.Parser);
    private readonly pbc::RepeatedField<global::org.herbal3d.basil.protocol.Message.PositionBlock> positions_ = new pbc::RepeatedField<global::org.herbal3d.basil.protocol.Message.PositionBlock>();
    /// <summary>
    /// Some messages are just pos updates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::org.herbal3d.basil.protocol.Message.PositionBlock> Positions {
      get { return positions_; }
    }

    /// <summary>Field number for the "Exception" field.</summary>
    public const int ExceptionFieldNumber = 12;
    private string exception_ = "";
    /// <summary>
    /// Responses can report errors
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exception {
      get { return exception_; }
      set {
        exception_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExceptionHints" field.</summary>
    public const int ExceptionHintsFieldNumber = 22;
    private static readonly pbc::MapField<string, string>.Codec _map_exceptionHints_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 178);
    private readonly pbc::MapField<string, string> exceptionHints_ = new pbc::MapField<string, string>();
    /// <summary>
    /// more information about the error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ExceptionHints {
      get { return exceptionHints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasilMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasilMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResponseCode != other.ResponseCode) return false;
      if (ResponseKey != other.ResponseKey) return false;
      if (StreamId != other.StreamId) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (ChangeSeq != other.ChangeSeq) return false;
      if (ChangeTime != other.ChangeTime) return false;
      if (QueueTime != other.QueueTime) return false;
      if (SendTime != other.SendTime) return false;
      if (TransportClass != other.TransportClass) return false;
      if (Op != other.Op) return false;
      if (SessionAuth != other.SessionAuth) return false;
      if (ItemIdN != other.ItemIdN) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemAuth != other.ItemAuth) return false;
      if (!IProps.Equals(other.IProps)) return false;
      if(!aProps_.Equals(other.aProps_)) return false;
      if(!positions_.Equals(other.positions_)) return false;
      if (Exception != other.Exception) return false;
      if (!ExceptionHints.Equals(other.ExceptionHints)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResponseCode != 0) hash ^= ResponseCode.GetHashCode();
      if (ResponseKey.Length != 0) hash ^= ResponseKey.GetHashCode();
      if (StreamId != 0) hash ^= StreamId.GetHashCode();
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (ChangeSeq != 0UL) hash ^= ChangeSeq.GetHashCode();
      if (ChangeTime != 0UL) hash ^= ChangeTime.GetHashCode();
      if (QueueTime != 0) hash ^= QueueTime.GetHashCode();
      if (SendTime != 0) hash ^= SendTime.GetHashCode();
      if (TransportClass != 0) hash ^= TransportClass.GetHashCode();
      if (Op != 0) hash ^= Op.GetHashCode();
      if (SessionAuth.Length != 0) hash ^= SessionAuth.GetHashCode();
      if (ItemIdN != 0) hash ^= ItemIdN.GetHashCode();
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (ItemAuth.Length != 0) hash ^= ItemAuth.GetHashCode();
      hash ^= IProps.GetHashCode();
      hash ^= aProps_.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (Exception.Length != 0) hash ^= Exception.GetHashCode();
      hash ^= ExceptionHints.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResponseCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResponseCode);
      }
      if (StreamId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StreamId);
      }
      if (ProtocolVersion != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ProtocolVersion);
      }
      if (Op != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Op);
      }
      if (SessionAuth.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SessionAuth);
      }
      if (ItemIdN != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ItemIdN);
      }
      if (ItemId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ItemId);
      }
      iProps_.WriteTo(output, _map_iProps_codec);
      aProps_.WriteTo(output, _repeated_aProps_codec);
      positions_.WriteTo(output, _repeated_positions_codec);
      if (Exception.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Exception);
      }
      if (ResponseKey.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ResponseKey);
      }
      if (ItemAuth.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ItemAuth);
      }
      exceptionHints_.WriteTo(output, _map_exceptionHints_codec);
      if (ChangeSeq != 0UL) {
        output.WriteRawTag(240, 1);
        output.WriteUInt64(ChangeSeq);
      }
      if (ChangeTime != 0UL) {
        output.WriteRawTag(248, 1);
        output.WriteUInt64(ChangeTime);
      }
      if (QueueTime != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(QueueTime);
      }
      if (SendTime != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(SendTime);
      }
      if (TransportClass != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(TransportClass);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResponseCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResponseCode);
      }
      if (ResponseKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ResponseKey);
      }
      if (StreamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StreamId);
      }
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProtocolVersion);
      }
      if (ChangeSeq != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ChangeSeq);
      }
      if (ChangeTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ChangeTime);
      }
      if (QueueTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(QueueTime);
      }
      if (SendTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SendTime);
      }
      if (TransportClass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TransportClass);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      if (SessionAuth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionAuth);
      }
      if (ItemIdN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemIdN);
      }
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (ItemAuth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemAuth);
      }
      size += iProps_.CalculateSize(_map_iProps_codec);
      size += aProps_.CalculateSize(_repeated_aProps_codec);
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (Exception.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exception);
      }
      size += exceptionHints_.CalculateSize(_map_exceptionHints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasilMessage other) {
      if (other == null) {
        return;
      }
      if (other.ResponseCode != 0) {
        ResponseCode = other.ResponseCode;
      }
      if (other.ResponseKey.Length != 0) {
        ResponseKey = other.ResponseKey;
      }
      if (other.StreamId != 0) {
        StreamId = other.StreamId;
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.ChangeSeq != 0UL) {
        ChangeSeq = other.ChangeSeq;
      }
      if (other.ChangeTime != 0UL) {
        ChangeTime = other.ChangeTime;
      }
      if (other.QueueTime != 0) {
        QueueTime = other.QueueTime;
      }
      if (other.SendTime != 0) {
        SendTime = other.SendTime;
      }
      if (other.TransportClass != 0) {
        TransportClass = other.TransportClass;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      if (other.SessionAuth.Length != 0) {
        SessionAuth = other.SessionAuth;
      }
      if (other.ItemIdN != 0) {
        ItemIdN = other.ItemIdN;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemAuth.Length != 0) {
        ItemAuth = other.ItemAuth;
      }
      iProps_.Add(other.iProps_);
      aProps_.Add(other.aProps_);
      positions_.Add(other.positions_);
      if (other.Exception.Length != 0) {
        Exception = other.Exception;
      }
      exceptionHints_.Add(other.exceptionHints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResponseCode = input.ReadUInt32();
            break;
          }
          case 24: {
            StreamId = input.ReadUInt32();
            break;
          }
          case 32: {
            ProtocolVersion = input.ReadUInt32();
            break;
          }
          case 40: {
            Op = input.ReadUInt32();
            break;
          }
          case 50: {
            SessionAuth = input.ReadString();
            break;
          }
          case 56: {
            ItemIdN = input.ReadUInt32();
            break;
          }
          case 66: {
            ItemId = input.ReadString();
            break;
          }
          case 74: {
            iProps_.AddEntriesFrom(input, _map_iProps_codec);
            break;
          }
          case 82: {
            aProps_.AddEntriesFrom(input, _repeated_aProps_codec);
            break;
          }
          case 90: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
          case 98: {
            Exception = input.ReadString();
            break;
          }
          case 162: {
            ResponseKey = input.ReadString();
            break;
          }
          case 170: {
            ItemAuth = input.ReadString();
            break;
          }
          case 178: {
            exceptionHints_.AddEntriesFrom(input, _map_exceptionHints_codec);
            break;
          }
          case 240: {
            ChangeSeq = input.ReadUInt64();
            break;
          }
          case 248: {
            ChangeTime = input.ReadUInt64();
            break;
          }
          case 320: {
            QueueTime = input.ReadUInt32();
            break;
          }
          case 328: {
            SendTime = input.ReadUInt32();
            break;
          }
          case 336: {
            TransportClass = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
