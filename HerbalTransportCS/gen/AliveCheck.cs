// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AliveCheck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace org.herbal3d.basil.protocol.AliveCheck {

  /// <summary>Holder for reflection information generated from AliveCheck.proto</summary>
  public static partial class AliveCheckReflection {

    #region Descriptor
    /// <summary>File descriptor for AliveCheck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AliveCheckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBBbGl2ZUNoZWNrLnByb3RvEgpBbGl2ZUNoZWNrGhBCYXNpbFR5cGVzLnBy",
            "b3RvImAKDUFsaXZlQ2hlY2tSZXESLAoEYXV0aBgBIAEoCzIeLkJhc2lsVHlw",
            "ZS5BY2Nlc3NBdXRob3JpemF0aW9uEgwKBHRpbWUYAiABKAQSEwoLc2VxdWVu",
            "Y2VOdW0YAyABKAUiZgoOQWxpdmVDaGVja1Jlc3ASDAoEdGltZRgBIAEoBBIT",
            "CgtzZXF1ZW5jZU51bRgCIAEoBRIUCgx0aW1lUmVjZWl2ZWQYAyABKAQSGwoT",
            "c2VxdWVuY2VOdW1SZWNlaXZlZBgEIAEoBUIpqgImb3JnLmhlcmJhbDNkLmJh",
            "c2lsLnByb3RvY29sLkFsaXZlQ2hlY2tiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.AliveCheck.AliveCheckReq), global::org.herbal3d.basil.protocol.AliveCheck.AliveCheckReq.Parser, new[]{ "Auth", "Time", "SequenceNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.AliveCheck.AliveCheckResp), global::org.herbal3d.basil.protocol.AliveCheck.AliveCheckResp.Parser, new[]{ "Time", "SequenceNum", "TimeReceived", "SequenceNumReceived" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Ping the other side to measure delay and functionality
  /// </summary>
  public sealed partial class AliveCheckReq : pb::IMessage<AliveCheckReq> {
    private static readonly pb::MessageParser<AliveCheckReq> _parser = new pb::MessageParser<AliveCheckReq>(() => new AliveCheckReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AliveCheckReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.AliveCheck.AliveCheckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveCheckReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveCheckReq(AliveCheckReq other) : this() {
      Auth = other.auth_ != null ? other.Auth.Clone() : null;
      time_ = other.time_;
      sequenceNum_ = other.sequenceNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveCheckReq Clone() {
      return new AliveCheckReq(this);
    }

    /// <summary>Field number for the "auth" field.</summary>
    public const int AuthFieldNumber = 1;
    private global::org.herbal3d.basil.protocol.BasilType.AccessAuthorization auth_;
    /// <summary>
    /// not just anyone can see I'm alive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.AccessAuthorization Auth {
      get { return auth_; }
      set {
        auth_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "sequenceNum" field.</summary>
    public const int SequenceNumFieldNumber = 3;
    private int sequenceNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNum {
      get { return sequenceNum_; }
      set {
        sequenceNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AliveCheckReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AliveCheckReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Auth, other.Auth)) return false;
      if (Time != other.Time) return false;
      if (SequenceNum != other.SequenceNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (auth_ != null) hash ^= Auth.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (SequenceNum != 0) hash ^= SequenceNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (auth_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Auth);
      }
      if (Time != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Time);
      }
      if (SequenceNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SequenceNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (auth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Auth);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (SequenceNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AliveCheckReq other) {
      if (other == null) {
        return;
      }
      if (other.auth_ != null) {
        if (auth_ == null) {
          auth_ = new global::org.herbal3d.basil.protocol.BasilType.AccessAuthorization();
        }
        Auth.MergeFrom(other.Auth);
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.SequenceNum != 0) {
        SequenceNum = other.SequenceNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (auth_ == null) {
              auth_ = new global::org.herbal3d.basil.protocol.BasilType.AccessAuthorization();
            }
            input.ReadMessage(auth_);
            break;
          }
          case 16: {
            Time = input.ReadUInt64();
            break;
          }
          case 24: {
            SequenceNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AliveCheckResp : pb::IMessage<AliveCheckResp> {
    private static readonly pb::MessageParser<AliveCheckResp> _parser = new pb::MessageParser<AliveCheckResp>(() => new AliveCheckResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AliveCheckResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.AliveCheck.AliveCheckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveCheckResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveCheckResp(AliveCheckResp other) : this() {
      time_ = other.time_;
      sequenceNum_ = other.sequenceNum_;
      timeReceived_ = other.timeReceived_;
      sequenceNumReceived_ = other.sequenceNumReceived_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveCheckResp Clone() {
      return new AliveCheckResp(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "sequenceNum" field.</summary>
    public const int SequenceNumFieldNumber = 2;
    private int sequenceNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNum {
      get { return sequenceNum_; }
      set {
        sequenceNum_ = value;
      }
    }

    /// <summary>Field number for the "timeReceived" field.</summary>
    public const int TimeReceivedFieldNumber = 3;
    private ulong timeReceived_;
    /// <summary>
    /// When the AliveCheck was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeReceived {
      get { return timeReceived_; }
      set {
        timeReceived_ = value;
      }
    }

    /// <summary>Field number for the "sequenceNumReceived" field.</summary>
    public const int SequenceNumReceivedFieldNumber = 4;
    private int sequenceNumReceived_;
    /// <summary>
    /// The sequence number sent in the AliveCheck
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNumReceived {
      get { return sequenceNumReceived_; }
      set {
        sequenceNumReceived_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AliveCheckResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AliveCheckResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (SequenceNum != other.SequenceNum) return false;
      if (TimeReceived != other.TimeReceived) return false;
      if (SequenceNumReceived != other.SequenceNumReceived) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (SequenceNum != 0) hash ^= SequenceNum.GetHashCode();
      if (TimeReceived != 0UL) hash ^= TimeReceived.GetHashCode();
      if (SequenceNumReceived != 0) hash ^= SequenceNumReceived.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Time);
      }
      if (SequenceNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceNum);
      }
      if (TimeReceived != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TimeReceived);
      }
      if (SequenceNumReceived != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SequenceNumReceived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (SequenceNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNum);
      }
      if (TimeReceived != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeReceived);
      }
      if (SequenceNumReceived != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumReceived);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AliveCheckResp other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.SequenceNum != 0) {
        SequenceNum = other.SequenceNum;
      }
      if (other.TimeReceived != 0UL) {
        TimeReceived = other.TimeReceived;
      }
      if (other.SequenceNumReceived != 0) {
        SequenceNumReceived = other.SequenceNumReceived;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadUInt64();
            break;
          }
          case 16: {
            SequenceNum = input.ReadInt32();
            break;
          }
          case 24: {
            TimeReceived = input.ReadUInt64();
            break;
          }
          case 32: {
            SequenceNumReceived = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
